
REDES NEURAIS ARTIFICIAIS => Aprendizado de máquina => RECONHECIMENTO DE PADRÕES
        -> vários algoritmos (tipo de treinamento, topologia (quantas camadas),
                              tipo propagação (feedforward ou feedback propagations))

            -> redes recorrente (feedback propagation - retroalimentação para ajudar no
                                 treinamento não supervisionado)

            -> redes famosas (perceptron (treinamento supervisionado, feedforward propagation))

            -> redes convolucionais (google em veículos autônomos, tradução de textos)
                                    (feedback propagation, multicamadas, 
                                     treinamento não supervisionado)

        -> USAR: classificar, agrupar, diagnosticar, predizer, prever
            -> MINERAÇÃO (dados, texto, web, imagem)

        Aprendizagem:
            - observação
            - escuta
            - experimentação
            - leitura
    
        Itens a observar/escutar/experimentar/ler
            - atributos massivos
            - pesos respectivos ()

        trabalha/exercita atributos e seus pesos => TREINAMENTO => APRENDIZADO DA MÁQUINA


        Treinamento (não supervisionada / supervisionada / híbrida)    
            - é dependente da capacidade de armazenar, raciocinar e aprender
            - é dependente de um conceito de LIMIAR (threshold) ou função objetivo
            - trabalha a relação de atributos e seus pesos (ajustes dessa combinação)


        Projetar uma RNA envolve:
            - identificar a área em que se deseja RECONHECER PADRÕES ou realizar DIAGNÓSTICO
            - identificar atributos e pesos;             
            - separar atributos (conjunto) em categorias, ou seja, em diferentes neurônios
            - definir as funções objetivos (limiar de treinamento) de cada neurônio
            - mecanismo de treinamento (supervisionado ou não ou pesos fixos)
                - se supervisionado: usar base de teste 

        TIPOS DE TREINAMENTO:
            - supervisionado: classificação (talvez o mais aplicado), regressão
                              Presença de um supervisor que informe a saída desejada

                              Ex.: classificar categorias parafusos, identificar pela
                              regra da vizinhança de que time/grupo um indivíduo pertence

            - não supervisionado: associação, agrupamento, detecção de desvios,
                                  padrões sequenciais, sumarização
                              Ex.: identificar porções ou elementos em imagens sem que se  
                                   saiba de fato a saída

            - pesos fixo (matemática) -> trabalhar sempre com um par (entrada x saída)

            - reforço: 
                      Ex.: Sistemas Multiagentes (agentes aprendem pelas interações - 
                                                   penalizações)

        TREINAMENTO/APRENDIZAGEM SUPERVISIONADA (CLASSIFICAÇÃO):
            1) extrair características
            2) aplicar algoritmmo de treinamento/Aprendizagem (presença de supervisor)
                2.1) entradas vs pesos
                2.2) função somatório
                2.3) função ativação (step, sign ou sigmoide)
            3) finalizar o modelo (modelo treinado/aprendido)


        FUNCIONAMENTO DO SISTEMA TREINADO/APRENDIDO
            1) extrair características
            2) aplicar modelo treinado/aprendido
            3) reconhecer o desejado


        TRATAMENTO DO ERRO EM TREINAMENTO SUPERVISIONADO (mais usado, mas não é o único)
        - erro = saidaEsperada - saidaCalculadaGerada
        - peso = peso + (taxaAprendizagem * entrada * erro)
        
            IDEIA DO ALGORITMO DE TREINAMENTO   
                enquanto (saida_gerada != saida_esperada)                   //erro existir
                    para cada registro                                      //conjunto de entradas
                        calcular a saída com os pesos atuais
                        comparar a saida_esperada com a saida_gerada        //calculo erro
                        para cada peso da rede
                            peso = peso + (taxa_aprendizagem * entrada * erro)  //ajuste pesos